#!/usr/bin/env bash

# ----------------------------------------------------------------------
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# --
# Copyright 2015-2025 Andi Dittrich <https://aenon-dynamics.com>
# ----------------------------------------------------------------------
# __  ______   ___   ___      _____           _
# \ \/ / ___| / _ \ / _ \    |_   _|__   ___ | |
#  \  /|___ \| | | | (_) |_____| |/ _ \ / _ \| |
#  /  \ ___) | |_| |\__, |_____| | (_) | (_) | |
# /_/\_\____/ \___/   /_/      |_|\___/ \___/|_|
#
# manage X509 certificates used for tls/cert-based-authentication
# https://github.com/AenonDynamics/X509-Tool
#
# ----------------------------------------------------------------------

VERSION="3.2.0"

show_usage(){
    cat << EOF
Usage: x509-tool <command> [args...]

  Commands:
    ca init <ca-name>             Initializes basic ca directory structure

    ica init <cname> <ou>         Add a new intermediate certificate authority and copy current config

    verify <cert-file>            Verifies a certificate against CRL
    show <cert-file>              Display a certificate as text

    client add <cname>            Add a new client certificate
    client revoke <cname>         Revoke a client certificate
    
    server add <cname>            Add a new server certificate
    server revoke <cname>         Revoke a server vertificate
    
    host add <cname>              Add a new host certificate
    host revoke <cname>           Revoke a host vertificate

    code add <cname>              Add a new codesigning certificate
    code revoke <cname>           Revoke a codesigning certificate

    smime add <cname> <email>     Add a new s/mime signing certificate
    smime revoke <email>          Revoke a s/mime signing certificate

    openvpn init <ca-name>        Initializes CA + tls auth, dhparams and single server

    --help                        Displays this help
    --version                     Displays version
EOF
    exit 0
}

show_version(){
    cat << EOF
x509-tool
 - Version: ${VERSION}
 - License: MPL-2.0 http://mozilla.org/MPL/2.0/
 - Repository: https://github.com/AenonDynamics/x509-tool
EOF
    exit 0
}

# simple processing
[ "${1}" = "--help" ] && show_usage
[ "${1}" = "--version" ] && show_version

# Exit on Error
set -e

# current working dir
WORKING_DIR="$(pwd)"

# basedir
BASEDIR="$( cd "$( dirname "$(realpath ${BASH_SOURCE}[0])" )" && pwd )"

# locations
OVPN_BIN=/usr/sbin/openvpn
OPENSSL_BIN=/usr/bin/openssl
CONF_DIR=/etc/x509-tool
LIB_DIR=/usr/share/x509-tool

# command provided ?
if [ -z "${1}" ]; then
    show_usage
fi

# load bash functions
source ${LIB_DIR}/bash-functions

# load command extensions
for x509ext in ${LIB_DIR}/*.sh; do source ${x509ext}; done

# VARS
# ----------------------------------------------

# directory structure
CA_DIRNAME="ca"
ICA_DIRNAME="ica"
SERVER_DIRNAME="server"
CLIENT_DIRNAME="client"
HOST_DIRNAME="host"
CSIGN_DIRNAME="codesign"
SMIME_DIRNAME="smime"

# Export Config Dirs
export CA_DIR="${WORKING_DIR}/${CA_DIRNAME}"
export ICA_DIR="${WORKING_DIR}/${ICA_DIRNAME}"
export SERVER_DIR="${WORKING_DIR}/${SERVER_DIRNAME}"
export CLIENT_DIR="${WORKING_DIR}/${CLIENT_DIRNAME}"
export HOST_DIR="${WORKING_DIR}/${HOST_DIRNAME}"
export CSIGN_DIR="${WORKING_DIR}/${CSIGN_DIRNAME}"
export SMIME_DIR="${WORKING_DIR}/${SMIME_DIRNAME}"

# Check environment
# ----------------------------------------------
function environment_check(){

    # cert config available ?
    if [ ! -f "${WORKING_DIR}/cert.conf" ]; then
        log_error "Error: Configuration file cert.conf not found in current directory! Do you have created it yet?"
        log_error "An example file is available in ${CONF_DIR}/cert.example.conf"
        exit 1
    fi
    
    # Load cert config/parameter
    source "${WORKING_DIR}/cert.conf"
    
    # ca exists ?
    if [ "${1}" != "noca" ]; then
        [ -f "${CA_DIR}/ca.crt" ] || panic "certificate authority doesn't exist"
    fi
}

# Generate CommonName based on type/template
# ----------------------------------------------
function resolveCertParams(){

    # export common name as env
    case "${1}" in
        client_cert)
            export KEY_CN=$(printf ${CLIENT_COMMON_NAME} "${2}")
            CRT_FILENAME="client"
            CRT_STORAGE_DIR="${CLIENT_DIR}"
        ;;

        server_cert)
            export KEY_CN=$(printf ${SRV_COMMON_NAME} "${2}")
            CRT_FILENAME="server"
            CRT_STORAGE_DIR="${SERVER_DIR}"
        ;;

        host_cert)
            export KEY_CN=$(printf ${HOST_COMMON_NAME} "${2}")
            CRT_FILENAME="host"
            CRT_STORAGE_DIR="${HOST_DIR}"
        ;;

        codesigning_cert)
            export KEY_CN=$(printf ${CODESIGNING_COMMON_NAME} "${2}")
            CRT_FILENAME="code"
            CRT_STORAGE_DIR="${CSIGN_DIR}"
        ;;

        smime_cert)
            export KEY_EMAIL=$(printf ${SMIME_EMAIL_NAME} "${3}")
            export KEY_CN=$(printf ${SMIME_COMMON_NAME} "${2}")
            CRT_FILENAME="smime"
            CRT_STORAGE_DIR="${SMIME_DIR}"
        ;;

        ica_cert)
            export KEY_OU="${3}"
            export KEY_CN=$(printf ${ICA_COMMON_NAME} "${2}")
            CRT_FILENAME="ca"
            CRT_STORAGE_DIR="${ICA_DIR}"
        ;;

        *)
            # unknown
            panic "error: unknown openssl extension <${1}>"
        ;;
    esac

    # cert naming scheme
    if [ "${CRT_SCHEME}" == "cn" ]; then
        CRT_FILENAME="${KEY_CN}"
    fi

    # derived crt output path
    CRT_OUTPUT_NAME="${CRT_STORAGE_DIR}/${KEY_CN}/${CRT_FILENAME}"
}

# generate new private key
# ----------------------------------------------
function cert_genpkey(){
    print_heading "generating new private ${KEY_TYPE} key"

    # generate EC key ?
    if [ "${KEY_TYPE}" == "EC" ]; then
        ${OPENSSL_BIN} genpkey \
            -algorithm EC \
            -pass "${2}" \
            -pkeyopt ec_paramgen_curve:${KEY_EC_CURVE} \
            -pkeyopt ec_param_enc:named_curve \
            -out "${1}" || panic "error: cannot create private key"

    # default: RSA
    else
        ${OPENSSL_BIN} genpkey \
            -algorithm RSA \
            -pass "${2}" \
            -pkeyopt rsa_keygen_bits:${KEY_SIZE} \
            -out "${1}" || panic "error: cannot create private key"
    fi
}

# Display Cert in clear-text
# ----------------------------------------------
function cert_show(){
    print_heading "Certificate [${1}]"
    ${OPENSSL_BIN} x509 \
        -in "${1}" \
        -text \
        -noout
}

# (Re-)Create the Certificate revocation list
# ----------------------------------------------
function crl_create(){
    print_heading "Certificate revocation list [${1}]"

    # generate crl
    ${OPENSSL_BIN} ca \
        -batch \
        -config "${CONF_DIR}/openssl.conf" \
        -gencrl \
        -out "${CA_DIR}/crl.pem"

    # show crl
    ${OPENSSL_BIN} crl \
        -in "${CA_DIR}/crl.pem" \
        -noout \
        -text

    # join ca+crl for verification
    cat "${CA_DIR}/crl.pem" "${CA_DIR}/ca.crt" > "${CA_DIR}/ca-crl-verify.pem"
}

# Verifying Cert including Certificate revocation list
# ----------------------------------------------
function cert_verify(){
    print_heading "Verifying Certificate [${1}]"
    ${OPENSSL_BIN} verify \
        -crl_check \
        -CAfile "${CA_DIR}/ca-crl-verify.pem" \
        ${1}
}

# Create new Cert
# ----------------------------------------------
function cert_create(){

    # cert already exists ?
    [ -s "${CRT_OUTPUT_NAME}.crt" ] && panic "cert [${KEY_CN}] already exists!"

    print_heading "creating certificate for [${KEY_CN}]"
   
    # openssl extension
    OPENSSL_EXT=${1}

    # create output dir
    mkdir -p "${CRT_STORAGE_DIR}/${KEY_CN}"

    # Show info
    log_info ${KEY_COUNTRY}
    log_info ${KEY_PROVINCE}
    log_info ${KEY_CITY}
    log_info ${KEY_ORG}
    log_info ${KEY_OU}
    log_info ${KEY_CN}
    log_info ${KEY_EMAIL}

    # generate private key
    cert_genpkey "${CRT_OUTPUT_NAME}.key" "${PKEY_PASS_TYPE}"

    # create CSR
    log_info "generating signing request.."
    ${OPENSSL_BIN} req \
        -config "${CONF_DIR}/openssl.conf" \
        -new \
        -key "${CRT_OUTPUT_NAME}.key" \
        -out "${CRT_OUTPUT_NAME}.csr" || panic "error: cannot create private key + csr"

    # Sign CSR -> Generate CERT
    log_info "creating cert.."
    ${OPENSSL_BIN} ca \
        -batch \
        -notext \
        -config ${CONF_DIR}/openssl.conf \
        -days ${CRT_EXPIRE} \
        -extensions ${OPENSSL_EXT} \
        -passin "${CA_PASS_TYPE}" \
        -in "${CRT_OUTPUT_NAME}.csr" \
        -out "${CRT_OUTPUT_NAME}.crt" || panic "error: cannot sign cert"

    # Convert to p12 (easier handling)
    log_info "converting cert to p12 format.."
    ${OPENSSL_BIN} pkcs12 \
        -export \
        -in "${CRT_OUTPUT_NAME}.crt" \
        -inkey "${CRT_OUTPUT_NAME}.key" \
        -certfile "${CA_DIR}/ca-fullchain.pem" \
        -out "${CRT_OUTPUT_NAME}.p12" \
        -passin "${PKEY_PASS_TYPE}" \
        -passout "${P12_PASS_TYPE}"

    # show cert
    cert_show "${CRT_OUTPUT_NAME}.crt"
}

# Revoke existing CRT
# ----------------------------------------------
function cert_revoke(){

    # cert already exists ?
    [ ! -f "${CRT_OUTPUT_NAME}.crt" ] && panic "cert [${KEY_CN}] already exists!"

    print_heading "revoking cert [${1}].."
    ${OPENSSL_BIN} ca \
        -config "${CONF_DIR}/openssl.conf" \
        -revoke "${CRT_OUTPUT_NAME}.crt" || panic "error: unable to revoke cert"

    # Re-Create CRL
    crl_create
}


# Command Dispatching
# ---------------------------------------
case "${1}:${2}" in
    ca:init)
        environment_check "noca"
        ca_init "${3}"
        exit 0
    ;;

    ica:init)
        environment_check "noca"
        ica_init "${3}" "${4}"
        exit 0
    ;;

    openvpn:init)
        environment_check "noca"
        openvpn_init "${3}"
        exit 0
    ;;

    client:add)
        environment_check
        resolveCertParams "client_cert" "${3}"
        cert_create "client_cert"
        exit 0
    ;;

    client:revoke)
        environment_check
        resolveCertParams "client_cert" "${3}"
        cert_revoke "${3}"
        exit 0
    ;;

    server:add)
        environment_check
        resolveCertParams "server_cert" "${3}"
        cert_create "server_cert"
        exit 0
    ;;

    server:revoke)
        environment_check
        resolveCertParams "server_cert" "${3}"
        cert_revoke "${3}"
        exit 0
    ;;

    host:add)
        environment_check
        resolveCertParams "host_cert" "${3}"
        cert_create "host_cert"
        exit 0
    ;;

    host:revoke)
        environment_check
        resolveCertParams "host_cert" "${3}"
        cert_revoke "${3}"
        exit 0
    ;;

    code:add)
        environment_check
        resolveCertParams "codesigning_cert" "${3}"
        cert_create "codesigning_cert"
        exit 0
    ;;

    code:revoke)
        environment_check
        resolveCertParams "codesigning_cert" "${3}"
        cert_revoke "${3}"
        exit 0
    ;;

    smime:add)
        environment_check
        resolveCertParams "smime_cert" "${3}" "${4}"
        cert_create "smime_cert"
        exit 0
    ;;

    smime:revoke)
        environment_check
        resolveCertParams "smime_cert" "${3}"
        cert_revoke "${3}"
        exit 0
    ;;

    show:*)
        cert_show "${2}"
        exit 0
    ;;

    verify:*)
        environment_check
        cert_verify "${2}"
        exit 0
    ;;

    *)
        show_usage
        exit 1
    ;;
esac
