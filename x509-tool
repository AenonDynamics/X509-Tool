#!/usr/bin/env bash

# ----------------------------------------------------------------------
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# --
# Copyright 2015-2019 Andi Dittrich <https://aenon-dynamics.com>
# ----------------------------------------------------------------------
# __  ______   ___   ___      _____           _
# \ \/ / ___| / _ \ / _ \    |_   _|__   ___ | |
#  \  /|___ \| | | | (_) |_____| |/ _ \ / _ \| |
#  /  \ ___) | |_| |\__, |_____| | (_) | (_) | |
# /_/\_\____/ \___/   /_/      |_|\___/ \___/|_|
#
# manage X509 certificates used for cert-based-authentication
# https://github.com/AenonDynamics/X509-Tool
#
# ----------------------------------------------------------------------

VERSION="2.0.0"

show_usage(){
    cat << EOF
Usage: x509-tool <command> [args...]

  Commands:
    init ca <ca-name>           Initializes basic ca directory structure
    init openvpn <ca-name>      Initializes CA + tls auth, dhparams and single server
    client add <cname>          Add a new client certificate
    client revoke <cname>       Revoke a client certificate
    server add <cname>          Add a new server certificate
    server revoke <cname>       Revoke a server vertificate
    verify <cert-file>          Verifies a certificate against CRL
    show <cert-file>            Display a certificate as text

    --help                      Displays this help
    --version                   Displays version
EOF
    exit 0
}

show_version(){
    cat << EOF
x509-tool
 - Version: ${VERSION}
 - License: MPL-2.0 http://mozilla.org/MPL/2.0/
 - Repository: https://github.com/AenonDynamics/x509-tool
EOF
    exit 0
}

# simple processing
[ "$1" = "--help" ] && show_usage
[ "$1" = "--version" ] && show_version

# Exit on Error
set -e

# current working dir
WORKING_DIR="$(pwd)"

# basedir
BASEDIR="$( cd "$( dirname "$(realpath $BASH_SOURCE[0])" )" && pwd )"

# locations
OVPN_BIN=/usr/sbin/openvpn
OPENSSL_BIN=/usr/bin/openssl
CONF_DIR=/etc/x509-tool
#CONF_DIR=$BASEDIR

# command provided ?
if [ -z "$1" ]; then
    show_usage
fi

# cert config available ?
if [ ! -f "$WORKING_DIR/cert.conf" ]; then
    echo "Error: Configuration file cert.conf not found in current directory! Do you have created it yet?"
    echo "An example file is available in $CONF_DIR/cert.example.conf"
    exit 1
fi

# Load cert config/parameter
source "$WORKING_DIR/cert.conf"

# VARS
# ----------------------------------------------

# Export Config Dirs
export CA_DIR="$WORKING_DIR/ca"
export ICA_DIR="$WORKING_DIR/ica"
export SERVER_DIR="$WORKING_DIR/servers"
export CLIENT_DIR="$WORKING_DIR/clients"

# Simple Header
# ----------------------------------------------
print_heading(){
    if [ $# -ne 1 ]; then
        return 1
    fi

    # blue
    echo -e '\x1B[1;34m'
    echo "__________________________________________________________________________"
    echo ""
    echo " $1"
    echo "__________________________________________________________________________"
    echo -e '\x1B[0m'
}

# Check environment
# ----------------------------------------------
function environmentCheck(){
    :
}

# Display Cert in clear-text
# ----------------------------------------------
function showCert(){
    print_heading "Certificate [$1]"
    $OPENSSL_BIN x509 \
        -in "$1" \
        -text \
        -noout
}

# (Re-)Create the Certificate revocation list
# ----------------------------------------------
function createCRL(){
    print_heading "Certificate revocation list [$1]"

    # generate crl
    $OPENSSL_BIN ca \
        -batch \
        -config "$CONF_DIR/openssl.conf" \
        -gencrl \
        -out "$CA_DIR/crl.pem"

    # show crl
    $OPENSSL_BIN crl \
        -in "$CA_DIR/crl.pem" \
        -noout \
        -text

    # join ca+crl for verification
    cat "$CA_DIR/crl.pem" "$CA_DIR/ca.crt" > "$CA_DIR/ca-crl-verify.pem"
}

# Verifying Cert including Certificate revocation list
# ----------------------------------------------
function verifyCert(){
    print_heading "Verifying Certificate [$1]"
    $OPENSSL_BIN verify \
        -crl_check \
        -CAfile "$CA_DIR/ca-crl-verify.pem" \
        $1
}

# Create new Cert
# ----------------------------------------------
function createCert(){
   
    # openssl extension
    OPENSSL_EXT=$2

    # output filename
    OUTPUT_NAME=$3

    # <storage_dir>/<common_name>
    OUTPUT_DIR=$4/$1

    # create output dir
    mkdir -p "$OUTPUT_DIR"

    # cert filenames
    CERT_KEY="$OUTPUT_DIR/$OUTPUT_NAME.key"
    CERT_REQ="$OUTPUT_DIR/$OUTPUT_NAME.csr"
    CERT_FILE="$OUTPUT_DIR/$OUTPUT_NAME.crt"
    CERT_P12="$OUTPUT_DIR/$OUTPUT_NAME.p12"

    # export common name as env
    export KEY_CN=$(printf $CLIENT_COMMON_NAME "$1")

    # Show info
    echo $KEY_COUNTRY
    echo $KEY_PROVINCE
    echo $KEY_CITY
    echo $KEY_ORG
    echo $KEY_OU
    echo $KEY_CN
    echo $KEY_EMAIL

    # Create Private Key + CSR
    echo "generating private-key and signing request.."
    $OPENSSL_BIN req \
        -config "$CONF_DIR/openssl.conf" \
        -days $CRT_EXPIRE \
        -nodes \
        -new \
        -keyout "$CERT_KEY" \
        -out "$CERT_REQ"

    # Sign CSR -> Generate CERT
    echo "creating CRT.."
    $OPENSSL_BIN ca \
        -batch \
        -config $CONF_DIR/openssl.conf \
        -days $CRT_EXPIRE \
        -extensions $OPENSSL_EXT \
        -in "$CERT_REQ" \
        -out "$CERT_FILE"

    # Convert to p12 (easier handling)
    echo "converting to p12 format.."
    $OPENSSL_BIN pkcs12 \
        -nodes \
        -export \
        -in "$CERT_FILE" \
        -inkey "$CERT_KEY" \
        -certfile "$CA_DIR/ca.crt" \
        -out "$CERT_P12" \
        -passout pass:

    # show cert
    showCert "$CERT_FILE"
}

# Revoke existing CRT
# ----------------------------------------------
function revokeCert(){
    # Set Common Name
    export KEY_CN="$(printf "$CLIENT_COMMON_NAME" $1)"

    print_heading "Revoking Cert [$1].."
    $OPENSSL_BIN ca \
        -config "$CONF_DIR/openssl.conf" \
        -revoke "$2"

    # Re-Create CRL
    createCRL
}

# Revoke existing Client CRT
# ----------------------------------------------
function revokeClientCert(){
    # client not exists ?
    if [ ! -f "$CLIENT_DIR/$1/client.crt" ]; then
        echo "Client Configuration [$1] not exists!"
        exit 1
    fi

    revokeCert "$1" "$CLIENT_DIR/$1/client.crt"
}

# Revoke existing Server CRT
# ----------------------------------------------
function revokeServerCert(){
    # server not exists ?
    if [ ! -f "$SERVER_DIR/$1/server.crt" ]; then
        echo "Server Configuration [$1] not exists!"
        exit 1
    fi

    revokeCert "$1" "$SERVER_DIR/$1/server.crt"
}

# Create a new client cert
# ----------------------------------------------
function addClient(){
    # client not exists ?
    if [ -s "$CLIENT_DIR/$1/client.crt" ]; then
        echo "Client Configuration [$1] already exists!"
        exit 1
    fi

    print_heading "Generating Client Cert [$1]"

    # create new client certificate
    createCert "$1" "client_cert" "client" "$CLIENT_DIR"
}

# Create a new server cert
# ----------------------------------------------
function addServer(){
    # server not exists ?
    if [ -s "$SERVER_DIR/$1/server.crt" ]; then
        echo "Server Configuration [$1] already exists!"
        exit 1
    fi

    print_heading "Generating Server Cert [$1]"

    # create new client certificate
    createCert "$1" "server_cert" "server" "$SERVER_DIR"
}

# Create CA structure
# ----------------------------------------------
function initCA(){
    # directory already exists ?
    if [ -d "$CA_DIR" ] || [ -d "$SERVER_DIR" ]; then
        echo "Configuration $1 already exists!"
        exit 1
    else
        # create config dir
        echo "Creating Directory Structure.."
        mkdir $CA_DIR
        mkdir $ICA_DIR
        mkdir $SERVER_DIR
        mkdir $CLIENT_DIR
    fi

    print_heading "Initializing CA [$1]"

    # Set Common Name
    export KEY_CN="$(printf "$CA_COMMON_NAME" "$1")"

    # Create Index +  Serial file
    echo "01" > "$CA_DIR/serial"
    touch "$CA_DIR/db.txt"
    touch "$CA_DIR/db.txt.attr"

    # Create CA
    print_heading "Generating CA.."
    $OPENSSL_BIN req \
        -config "$CONF_DIR/openssl.conf" \
        -days $CA_EXPIRE \
        -nodes \
        -new \
        -x509 \
        -keyout "$CA_DIR/ca.key" \
        -out "$CA_DIR/ca.crt"

    # show CA cert
    showCert "$CA_DIR/ca.crt"

    # Create CRL
    createCRL
}

# Create CA, Server Cert, TLS Auth Key, dhparams
# ----------------------------------------------
function initOpenvpnServer(){
    # setup ca
    initCA "$1"

    # add initial server cert
    addServer "openvpn-server"

    # HMAC auth key setup
    echo "Generating TLS Auth Key.."
    $OVPN_BIN --genkey --secret "$CA_DIR/tls-auth.key"

    # Diffie hellman parameters
    print_heading "Generating DHParams"
    echo "Even Modern Systems (XEON/Core i) will take around 10-40min to complete!"
    $OPENSSL_BIN dhparam -out "$CA_DIR/dh$KEY_SIZE.pem" $KEY_SIZE

    # success!
    print_heading "READY!"
}


# Command Dispatching
# ---------------------------------------
case "$1:$2" in
    init:ca)
        initCA "$3"
        exit 0
    ;;

    init:openvpn)
        initOpenvpnServer "$3"
        exit 0
    ;;

    client:add)
        addClient "$3"
        exit 0
    ;;

    client:revoke)
        revokeClientCert "$3"
        exit 0
    ;;

    server:add)
        addServer "$3"
        exit 0
    ;;

    server:revoke)
        revokeServerCert "$3"
        exit 0
    ;;

    show:*)
        showCert "$2"
        exit 0
    ;;

    verify:*)
        verifyCert "$2"
        exit 0
    ;;

    *)
        show_usage
        exit 1
    ;;
esac
